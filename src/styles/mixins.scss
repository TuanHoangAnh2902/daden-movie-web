@use 'variables' as *;

@mixin category-item(
	$textHoverColor: none,
	$cursor: default,
	$borderColor: none,
	$bgColor: #ffffff10,
	$padding: 6px 9px,
	$fontSize: 12px
) {
	display: inline-block;
	padding: $padding;
	border-radius: 5px;
	color: $textColor;
	font-size: $fontSize;
	background-color: $bgColor;
	border: 1px solid $borderColor;
	white-space: nowrap;
	&:hover {
		color: $textHoverColor;
		cursor: $cursor;
	}
}

@mixin title-tab() {
	font-size: 25px;
	font-weight: 600;
	line-height: 38px;
	margin: 20px 0;
}

@mixin origin-name() {
	font-size: 13px;
	font-weight: 400;
	color: $subColor;
}

@mixin user-avatar {
	background-color: $subColor;
	border: 2px solid rgba(255, 255, 255, 0.2);
}

/// Max-width media query (tối đa)
@mixin respond-down($breakpoint) {
	$value: map-get($breakpoints, $breakpoint);
	@if $value {
		@media (max-width: $value) {
			@content;
		}
	} @else {
		@warn "⚠️ Breakpoint `#{$breakpoint}` không tồn tại!";
	}
}

/// Min-width media query (từ kích thước đó trở lên)
@mixin respond-up($breakpoint) {
	$value: map-get($breakpoints, $breakpoint);
	@if $value {
		@media (min-width: $value) {
			@content;
		}
	} @else {
		@warn "⚠️ Breakpoint `#{$breakpoint}` không tồn tại!";
	}
}

/// Between two breakpoints
@mixin respond-between($min, $max) {
	$min-val: map-get($breakpoints, $min);
	$max-val: map-get($breakpoints, $max);

	@if $min-val and $max-val {
		@media (min-width: $min-val) and (max-width: $max-val) {
			@content;
		}
	} @else {
		@warn "⚠️ Một trong hai breakpoint `#{$min}` hoặc `#{$max}` không tồn tại!";
	}
}
